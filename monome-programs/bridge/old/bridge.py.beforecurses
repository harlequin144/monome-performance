import liblo


# TO DO
# - option parsing ??? necessary
# - command line interface


class Bridge(liblo.Server):
	def __init__(self, listen_port, childs):
		liblo.Server.__init__(self, listen_port)


		# State variables
		self.on = True
		self.show = True
		self.tick = 0
		
		# Mixer
		self.mix = [0,0,0,0,0,0,0,0]
		
		# Message Forwarding
		self.children = childs

		# Register server methods
		for y, prefix, port in childs:
			print prefix
			self.add_method('/' + prefix + '/grid/key', None,
					self.forward_to_child, port)

		self.add_method(None, None, self.oscrespond)

		# Light up monome and display some info
		self.light_monome()
		liblo.send(13090, '/sys/info', self.get_port())
		liblo.send(13090, '/sys/prefix', 'bridge')


	def light_monome(self):
		if self.show:

			# Mixer
			for x,y in zip(range(8), self.mix):
				liblo.send(13090, '/bridge/grid/led/col', 
						x, 1, (255 - (2**(7-y)-1)) )

			# Child Buttons
			liblo.send(13090, '/bridge/grid/led/col', 15, 0, 0)
			liblo.send(13090, '/bridge/grid/led/col', 14, 0, 0)
			for y, prefix, port in self.children:
				print prefix
				liblo.send(13090, '/bridge/grid/led/set', 15, y, 1)
				liblo.send(13090, '/bridge/grid/led/set', 14, y, 1)

			# Transport Buttons
			if self.tick%32 < 16:
				liblo.send(13090, '/bridge/grid/led/col', 'iii', 8, 0, 192)
				liblo.send(13090, '/bridge/grid/led/col', 'iii', 9, 0, 192)
			elif self.tick%32 >= 16:
				liblo.send(13090, '/bridge/grid/led/col', 'iii', 8, 0, 48)
				liblo.send(13090, '/bridge/grid/led/col', 'iii', 9, 0, 48)

			# Clear others
			liblo.send(13090, '/bridge/grid/led/col', 10, 0, 0)
			liblo.send(13090, '/bridge/grid/led/col', 11, 0, 0)
			liblo.send(13090, '/bridge/grid/led/col', 12, 0, 0)
			liblo.send(13090, '/bridge/grid/led/col', 13, 0, 0)


	def run(self):
		while self.on:
			self.recv(30)

	def forward_to_child(self, path, args, types, src, data):
		liblo.send(data, path, *args)

	@liblo.make_method('/bridge/grid/key', None)
	def press_handler(self, path, args, types, src ):
		if args[2] == 1:
			#print('press responder' + str(args))

			# Mixer Section
			if args[0] <=7:
				self.mix[args[0]] = 7-args[1]
				liblo.send(13090, '/bridge/grid/led/col', 
						args[0], 1, (255 - (2**args[1]-1)) )


			# Transport Section
			elif args[0] in [8,9]:
				if args[1] in [0,1]:	# Start button
						liblo.send(57120, '/transport/start')

				if args[1] in [2,3]:	# Stop button
						liblo.send(57120, '/transport/stop')
						liblo.send(13090, '/bridge/grid/led/col', 8, 0, 0)
						liblo.send(13090, '/bridge/grid/led/col', 9, 0, 0)
						liblo.send(13090, '/bridge/grid/led/col', 10, 0, 0)
						liblo.send(13090, '/bridge/grid/led/col', 11, 0, 0)

			elif args[0] in [10,11]:
				if args[1] in [0,1]:	# Tap button
						liblo.send(57120, '/transport/tap')


			# Program Switching 
			elif args[0] in [14,15]:
				for y, prefix, port in self.children:
					print str(y) + prefix 
					if y == args[1]:
						print 'switching to child'
						liblo.send(13090, '/sys/prefix', prefix)
						liblo.send(port, '/' + prefix + '/show')
						self.show = False



	@liblo.make_method('/bridge/quit', None)
	def quit_responder(self, path, args, types, src ):
		self.on = False
		self.free()
		liblo.send(57120, '/transport/stop')


	@liblo.make_method('/tick', 'i')
	def tick_responder(self, path, args, types, src ):
		self.tick = args[0]
		if self.show:
			if args[0]%32 < 16:
				liblo.send(13090, '/bridge/grid/led/col', 8, 0, 3)
				liblo.send(13090, '/bridge/grid/led/col', 9, 0, 3)
			elif args[0]%32 >= 16:
				liblo.send(13090, '/bridge/grid/led/col', 8, 0, 12)
				liblo.send(13090, '/bridge/grid/led/col', 9, 0, 12)


	@liblo.make_method('/bridge/show', None)
	def show_responder(self, path, args, types, src ):
		self.show = True
		liblo.send(13090, '/sys/prefix', 'bridge')
		self.light_monome()


	#@liblo.make_method(None, None)
	def oscrespond(self, path, args, types, src ):
		print(path + ' ' + str(args))





if __name__ == "__main__":
	#parser = optparse.OptionParser()
	#parser.add_option('-l', '--listen-port', help='port to listen on')


	#(opts, args) = parser.parse_args()



	#Start and run the bridge
	#bridge = Bridge(8000, [(0, 'test', 12345),(7, 'qseq', 7720)])
	bridge = Bridge(8000, [(7, 'slider', 7720)])
	bridge.run()

	bridge.free()


