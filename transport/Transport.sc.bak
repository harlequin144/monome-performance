Transport {

	//calssvar numtransports
	const path = "/sc/transport";

	var tapTimes; // = List[];
	var tickPeriod;
	var factor = 1;
	var new_factor = 0;
	var down_tick = 0;
	var <tick = 0;
	var <on = false;

	var bridge, otherPorts, scPort;
	//var midiOut;

	*new {|bridgePort = 8000 ... othPorts|
		^super.new.init(bridgePort, *othPorts);
	}

	init {|bridgePort = 8000 ... othPorts|
		bridge = NetAddr.new("localhost", bridgePort);
		scPort = NetAddr.new("localhost", 57120);
		otherPorts = othPorts.collect(
			{|port| NetAddr.new("localhost", port);}
		);
		//midiOut = MIDIOut(0, midiUid);
		//midiOut.latency = 0;

		// Initializations
		tapTimes = List[];
		tickPeriod = (0.5 / 48);

		OSCdef(\trans_stop, { this.stop; }, path+/+'stop');
		OSCdef(\trans_start, { this.start; }, path+/+'start');
		OSCdef(\trans_toggle, { this.toggle; }, path+/+'toggle');
		OSCdef(\trans_tap, {|msg, time| this.tap(time) }, path+/+'tap');
		OSCdef(\trans_clear_tap, { this.clear_tap }, path+/+'clear_tap');
		OSCdef(\trans_set_bpm, {|msg| this.setBpm(msg[1]) },path+/+'set_bpm');

		// Validation happens in setBpm
		OSCdef(\trans_tempo_add_bpm,
			{|msg| this.setBpm( this.getBpm()+msg[1] ) },
			path+/+'tempo_add_bpm');

		OSCdef(\trans_tempo_sub_bpm,
			{|msg| this.setBpm( this.getBpm()-msg[1] ) },
			path+/+'tempo_sub_bpm');

		OSCdef(\trans_factor_power, {|msg| this.setFactorPower(msg[1]) },
			path+/+'factor_power');
	}

	// Conveinence Methods
	getBpm { ^( (1/(tickPeriod*(2**(-1*factor))))*(60/48) ) }

	setBpm { |bpm|
		if((bpm >= 10) && (bpm <= 600)){
			tickPeriod = (1 / ((bpm * 48)/60));
			bridge.sendMsg("/bridge/tempo", this.getBpm );
		}
	}

	setFactorPower { |fact|
		if( (fact==(-2)) || (fact==(-1)) || (fact==0) || (fact==1) || (fact==2)){
			new_factor = fact;
			bridge.sendMsg("/bridge/factor_power", new_factor );
		}
	}

	schedTickClock {
		SystemClock.sched((tickPeriod * (2**(-1*factor))),
			{|ticktime|
				bridge.sendMsg("/tick", tick);
				otherPorts.do({|port| port.sendMsg("/tick", tick) });
				scPort.sendMsg("/tick", tick);

				tick = (tick+1)%48; //tick.ticktln;
				// Delay factor update until down beat
				if(tick == 0){
					if(factor != new_factor){
						factor = new_factor;
						bridge.sendMsg("/bridge/tempo", this.getBpm());
					}
				};

				// resetting the tap times list
				if(tapTimes.size > 0){
					if(ticktime > (2.5 + tapTimes[tapTimes.size-1]))
					{ tapTimes = List[] };
				};
				//midiOut.midiClock;

				//(tickPeriod * (2**(-1*factor))).postln;
				tickPeriod * (2**(-1*factor));
		})
	}

	// The real meat

	start {
		on = true;
		tick = down_tick;
		SystemClock.clear;
		this.schedTickClock.value();
		//midiOut.start;
		bridge.sendMsg("/bridge/tempo", this.getBpm());
	}

	stop {
		on = false;
		SystemClock.clear;
		tapTimes = List[];
		tick = down_tick;

		//midiOut.stop;
		bridge.sendMsg("/bridge/stop");
		otherPorts.do({|port| port.sendMsg("/dtrig/stop") });
	}

	toggle { if(on){ this.stop }{ this.start } }

	tap { |time|
		var newPeriod;
		var sum = 0;


		// first add time to the list appropriately
		if(tapTimes.size != 0)
		{
			//If the taps are old, clear em out
			if( (time - tapTimes.last) > 3*48*tickPeriod )
			{ 
				tapTimes = List[time];
				//if(!on){ 
				//	down_tick = tick;
				//	otherPorts.do(
				//		{|port| port.sendMsg("/trasport/down_tick", tick) });
				//};
			}
			// Just adding on to a current list.
			{ tapTimes.add(time) };
		}

		// the list is empty, we're starting a new beat.
		{ 
			tapTimes.add(time);
			//down_tick = tick;
			if(!on){ 
				down_tick = tick;
				otherPorts.do(
					{|port| port.sendMsg("/trasport/down_tick", tick) });
			};
		};

		on = true; // This is here just cuz we needed the old state earlier.

		// then calculate tempo
		1.for(tapTimes.size-1, {|indx|
			sum = sum + (tapTimes[indx]-tapTimes[indx-1])});

		newPeriod = (sum / (tapTimes.size-1))/48;

		if((newPeriod < 0.125) &&  (newPeriod > 0.003)){
			tickPeriod = newPeriod;
			tickPeriod.postln;
			bridge.sendMsg("/bridge/tempo", this.getBpm );
		}

		// set all the appropriate numbers



		//tapTimes.add(time);
		//if(tapTimes.size > 8){ tapTimes.removeAt(0) };
		////get the lengths
		//if(tapTimes.size > 1){
		//	var sum = 0;
		//	1.for(tapTimes.size-1, {|indx|
		//		sum = sum + (tapTimes[indx]-tapTimes[indx-1])});

		//	newPeriod = (sum / (tapTimes.size-1))/48;

		//	if((newPeriod < 0.125) &&  (newPeriod > 0.003))
		//	{
		//		tickPeriod = newPeriod;
		//		tickPeriod.postln;
		//		bridge.sendMsg("/bridge/tempo", this.getBpm );
		//	}
		//	{ tapTimes = List[time] };
		//}{
		//	down_tick = tick;
		//};

		// Let 'er rip
		// The clock is restarted on every single tap
		SystemClock.clear;
		this.schedTickClock.value();
	}

	clear_tap { tapTimes = List[] }

}
